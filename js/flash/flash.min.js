// using-functions

flashPreventDefault();

flashBackToTop();

flashModalContainer();

flashForm();

flashClicker();

flashChangeContainers();

// the-end-of-using-functions



// functions



// flash-clicker

function flashClicker() {

	// elements-and-values
	const buttons = document.querySelectorAll('.fl-clicker');

	// avoiding-errors
	if(buttons[0] == undefined) return;

	// functions
	function clickBtn() {

		const target = this.getAttribute('click-target');
		document.querySelector(''+target+'').click();

	}
	
	// adding-functions
	for (var i = 0; i < buttons.length; i++) {
		buttons[i].addEventListener('click', clickBtn);
	}
}

// the-end-of-flash-clicker



// flash-form

function flashForm() {

	const forms = document.querySelectorAll('.fl-form');

	for (let i = 0; i < forms.length; i++) { 

		flashFormCheck(forms[i]);
		flashFormGallery(forms[i]);
		flashFormImage(forms[i]);
		flashFormTogglePassword(forms[i]);
		flashFormIcon(forms[i]);

	}

}

// flash-form-icon
function flashFormIcon(form) {
	const icons = form.querySelectorAll('.fl-form-icon');
	function focusIn() { this.closest('.fl-form-container').querySelector('.fl-form-input').focus(); }
	for (let i = 0; i < icons.length; i++) { icons[i].addEventListener('click', focusIn); }
}

// flash-form-check
function flashFormCheck(form) {

	const fields = form.querySelectorAll('.fl-form-required');
	const limitedFields = form.querySelectorAll('.fl-form-limit');
	const fileFields = form.querySelectorAll('.fl-form-required-file');
	const len = fields.length;
	const submit = form.querySelector('.fl-form-submit');
	const email = form.querySelector('.fl-form-email');
	const emailMes = form.querySelector('.fl-form-email-message');
	const messages = form.querySelectorAll('.fl-form-error-message');
	var isValid = false;

	if (!fields[0]) return;

	// functions
	// -requirement-
	function checkOnFocusOut() {
		const message = this.closest('.fl-form-container').querySelector('.fl-form-required-message');
		this.value == "" ? requiredMessage(this, message) : removeRequiredMessage(this, message); 
		validation() ? disableSubmit() : enableSubmit();
		this.addEventListener('keyup', check);
		this.removeEventListener('focusout', checkOnFocusOut);
	}

	function check() {
		const message = this.closest('.fl-form-container').querySelector('.fl-form-required-message');
		this.value == "" ? requiredMessage(this, message) : removeRequiredMessage(this, message); 
		validation() ? disableSubmit() : enableSubmit();
	}


	function checkFile() {
		alert("Hi");
		const message = this.closest('.fl-form-container').querySelector('.fl-form-required-message');
		this.files.length < 1 ? requiredMessage(this, message) : removeRequiredMessage(this, message); 
		validation() ? disableSubmit() : enableSubmit();
	}

	const requiredMessage = (input, message) => {
		input.classList.add('fl-form-required-error'); 
		if (message) message.classList.add('fl-show');
	}

	const removeRequiredMessage = (input, message) => {
		input.classList.remove('fl-form-required-error'); 
		if (message) message.classList.remove('fl-show');
	}

	// -character-limit-
	function checkLimitOnFocusOut() {

		const message = this.closest('.fl-form-container').querySelector('.fl-form-limit-message');
		const min = this.getAttribute('fl-form-min');
		const max = this.getAttribute('fl-form-max');
		const len = this.value.trim().length;
		len > 0 & len < min || len > max ? 
		limitMessage(this, message) : removeLimitMessage(this, message); 
		validation() ? disableSubmit() : enableSubmit();
		this.addEventListener('keyup', checkLimit);
		this.removeEventListener('focusout', checkLimitOnFocusOut);
	}

	function checkLimit() {

		const message = this.closest('.fl-form-container').querySelector('.fl-form-limit-message');
		const min = this.getAttribute('fl-form-min');
		const max = this.getAttribute('fl-form-max');
		const len = this.value.trim().length;
		len > 0 & len < min || len > max ? 
		limitMessage(this, message) : removeLimitMessage(this, message); 
		validation() ? disableSubmit() : enableSubmit();

	}

	const limitMessage = (input, message) => {
		input.classList.add('fl-form-limit-error'); 
		if (message) message.classList.add('fl-show');
	}

	const removeLimitMessage = (input, message) => {
		input.classList.remove('fl-form-limit-error'); 
		if (message) message.classList.remove('fl-show');
	}

	// -submit-
	const enableSubmit = () => submit.removeAttribute('disabled');

	const disableSubmit = () => submit.setAttribute('disabled', '');

	const toggleSubmit = () => isValid ? enableSubmit() : disableSubmit();

	const validation = () => {

		var countErrors = 0;

		for (let i = 0; i < fields.length; i++) { 
			if (fields[i].className.includes('error')) countErrors++;	
		}

		countErrors === 0 ? isValid = false : isValid = true;
		return isValid;

	}

	// -email-
	function emailOnFocusOut() {
		!flashIsEmail(this.value) & this.value != "" ? emailMessage() : removeEmailMessage(); 
		validation() ? disableSubmit() : enableSubmit();
		email.addEventListener('keyup', emailValidation);
		email.removeEventListener('focusout', emailOnFocusOut);
	} 

	function emailValidation() {
		!flashIsEmail(this.value) & this.value != "" ? emailMessage() : removeEmailMessage(); 
		validation() ? disableSubmit() : enableSubmit();
	} 

	const emailMessage = () => {
		email.classList.add('fl-form-email-error'); 
		if (emailMes) emailMes.classList.add('fl-show');
	}

	const removeEmailMessage = () => {
		email.classList.remove('fl-form-email-error'); 
		if (emailMes) emailMes.classList.remove('fl-show');
	}

	// -others-
	const checkAll = (e) => {

		for (let i = 0; i < len; i++) {

			if (fields[i].value == "") { 
				e.preventDefault();
				let mes = fields[i].closest('.fl-form-container').querySelector('.fl-form-required-message');
				requiredMessage(fields[i], mes); 
				disableSubmit();
			}
				
		}

		for (let i = 0; i < fileFields.length; i++) {

			if (fileFields[i].files.length < 1) { 
				e.preventDefault();
				let mes = fileFields[i].closest('.fl-form-container').querySelector('.fl-form-required-message');
				requiredMessage(fileFields[i], mes); 
				disableSubmit();
			}
				
		}

		startChecking();

	}

	const startChecking = () => {

		for (let i = 0; i < len; i++) { fields[i].addEventListener('keyup', check); }

		for (let i = 0; i < limitedFields.length; i++) { 
			limitedFields[i].addEventListener('keyup', checkLimit);  
		}		

		if (email) email.addEventListener('keyup', emailValidation);

	}

	const resetAll = () => {

		if (email) { 
			email.classList.remove('fl-form-required-error');
			email.classList.remove('fl-form-email-error');
		}

		for (let i = 0; i < messages.length; i++) { messages[i].classList.remove('fl-show'); }

		for (let i = 0; i < len; i++) { fields[i].classList.remove('fl-form-required-error');}

		for (let i = 0; i < limitedFields.length; i++) { 
			limitedFields[i].classList.remove('fl-form-limit-error');
		}

		enableSubmit();
		addEvents();

	}

	const addEvents = () => {

		for (let i = 0; i < len; i++) { 
			fields[i].addEventListener('focusout', checkOnFocusOut); 
		}

		for (let i = 0; i < limitedFields.length; i++) { 
			limitedFields[i].addEventListener('focusout', checkLimitOnFocusOut); 
		}

		for (let i = 0; i < fileFields.length; i++) { 
			fileFields[i].addEventListener('change', checkFile); 
		}

		if (email) email.addEventListener('focusout', emailOnFocusOut);

	}

	// adding-functions
	addEvents();	

	form.addEventListener('submit', checkAll);
	form.addEventListener('reset', resetAll);

}
	
// flash-form-form-image
function flashFormImage(form) {
	
		// get-elements-and-values
		const input = form.querySelector('.fl-form-img-input');
		const img = form.querySelector('.fl-form-img');

		if(!input || !img) return;

		const defaultSrc = img.src;

		// functions
		const change = () => img.src = URL.createObjectURL(event.target.files[0]);
		const reset = () => img.src = defaultSrc;

		// adding-functions
		input.addEventListener('change', change);
		form.addEventListener('reset', reset);	

}

// flash-form-toggle-password
function flashFormTogglePassword(form) {

	const inputs = form.querySelectorAll('.fl-form-password-input');
	const icons = form.querySelectorAll('.fl-form-password-icon');

	if (!inputs[0] || !icons[0]) return;

	function toggle() {

		const i = this.getAttribute('data-index');
		const type = inputs[i].getAttribute('type') === 'password' ? 'text' : 'password';
		inputs[i].setAttribute('type', type);
		inputs[i].focus();
		this.classList.toggle('fa-eye-slash');

	}

	for (let i = 0; i < inputs.length; i++) {
		icons[i].addEventListener('click', toggle);
		icons[i].setAttribute('data-index', i);
	}
	

}

// flash-form-gallery
function flashFormGallery(form) {
	
		// get-elements-and-values
		const input = form.querySelector('.fl-form-gallery-input');
		const galleryContainerExists = form.querySelector('.fl-form-gallery');
		var gallery;

		if(!input) return;

		if (galleryContainerExists) gallery = galleryContainerExists;
		else gallery = flashCreateElement("DIV","", {
				class: "fl-form-gallery",
			}, input.parentElement, "last-child");


		// functions
		const create = () => {

			reset();

			for (var i = 0, containers = []; i < event.target.files.length; i++) {

				containers[i] = flashCreateElement("DIV","", {
					class: "fl-form-gallery-img-container fl-form-img-animation",
				}, gallery, "last-child");

				flashCreateElement("IMG","", {
					class: "fl-form-gallery-img",
					src: ""+URL.createObjectURL(event.target.files[i])+""
				}, containers[i], "last-child");
				
			}

		}

		const reset = () => {

			var images = gallery.querySelectorAll('.fl-form-gallery-img-container');
			if (!images[0]) return;
			for (let i = 0; i < images.length; i++) { images[i].remove(); }

		}

		// adding-functions
		input.addEventListener('change', create);
		form.addEventListener('reset', reset);	

}

// the-end-of-flash-form



// flash-modal-container

function flashModalContainer() {

	// elements-and-values
	const modals = document.querySelectorAll('.fl-modal-con');

	// avoiding-errors
	if (modals[0] == undefined) return;

	const showers = document.querySelectorAll('.fl-modal-con-shower');
	const closers = document.querySelectorAll('.fl-modal-con-closer');
	var mouseIsOver = false;

	// functions
	function show() { 

		const target = this.getAttribute('target');
		const el = document.querySelector(''+target+'');
		el.classList.add('fl-show');

	}

	function close() { if (!mouseIsOver) this.classList.remove('fl-show'); }

	function closeWithBtn() { this.parentElement.classList.remove('fl-show'); }

	function isHovered() { mouseIsOver = true; }

	function isNotHovered() { mouseIsOver = false; }

	// adding-functions
	for (var i = 0, children = []; i < showers.length; i++) { 

		showers[i].addEventListener('click', show);

		if (modals[i] && closers[i]) closers[i].addEventListener('click', closeWithBtn);

		if (modals[i] == undefined || modals[i].getAttribute('bg-click') != "true") 
			continue;
		
		modals[i].addEventListener('click', close);
		
		children[i] = modals[i].querySelectorAll('.fl-modal-child');

		for (var x = 0; x < children[i].length; x++) {
			
				children[i][x].addEventListener('mouseover', isHovered);
				children[i][x].addEventListener('mouseout', isNotHovered);

		}

	}

}

// the-end-of-flash-modal-container




// flash-prevent-default

// !!! - to do that give links this class - .fl-link-disabled

function flashPreventDefault() {

	// elements-and-values
	var links = document.querySelectorAll('.fl-link-disabled');

	// avoiding-errors
	if(links[0] == undefined) return;

	// loop	
	for (var i = 0; i < links.length; i++) {

		links[i].onclick = function(event) { event.preventDefault(); }

	}	

}

// the-end-of-flash-prevent-default


// flash-is-scrolled

// !!! - Wenn element is scrolled, it gives to element class '.fl-is-scrolled'
// !!! - It works one time

function flashIsScrolled(el) {

	function addClass() {

		if (isInView(el)) {

			el.classList.add('fl-is-scrolled');
			window.removeEventListener('scroll', addClass);

		}	

	}	
	
	function isInView(el, percentageScroll = 100) {

	  const elementTop = el.getBoundingClientRect().top;

	  return (
	    elementTop <= 
	    ((window.innerHeight || document.documentElement.clientHeight) * (percentageScroll/100))
	  );

	}

	window.addEventListener('load', addClass);
	window.addEventListener('scroll', addClass);

}	

// the-end-of-flash-is-scrolled



// flash-back-to-top-button

function flashBackToTop() {

	// elements-and-values
	const btn = document.querySelector('.fl-back-to-top-btn');

	// avodiding-errors
	if (btn == undefined) return;

	// functions
	function show() { document.documentElement.scrollTop > 700 ? btn.classList.add('fl-show') : hide(); }

	function hide() { btn.classList.remove('fl-show'); }

	function toTop() { document.documentElement.scrollTop = 0; }

	// adding-functions
	btn.addEventListener('click', hide);
	btn.addEventListener('click', toTop);
	window.addEventListener('scroll', show);

}

// the-end-of-flash-back-to-top-button



// class-functions

function flashAddClassRemovingOthers(el, className, classes = []) {

	el.classList.add(''+className+'');

	for (var i = 0; i < classes.length; i++) {
	
			el.classList.remove(''+classes[i]+'');

	}

}

// the-end-of-class-functions



// characters

function flashGetCharactersLength(el, is_value, trim = false) {

	if (is_value) el = el.value;
	if (trim == true) el = el.trim();
	return el.length;

}

// the-end-of-characters



// flash-selector

function flashSelector(query, selectAll = false) {

	var el;

	if (typeof query == "string") {

		if (!selectAll) return el = document.querySelector(''+query+'');
		else return el = document.querySelectorAll(''+query+'');

	}
	
	return query;

}

// the-end-of-flash-selector



// flash-prevent-default

function flashPreventDefaultLinks(elements) {

	if (elements[0] == undefined) 
		element.addEventListener("click", function(event){
	  		event.preventDefault();
		});
	else {

		for (var i = 0; i < elements.length; i++) {

			elements[i].addEventListener("click", function(event){
	  			event.preventDefault();
			});

		}	

	}	

}

// the-end-of-flash-prevent-default



// flash-set-index

function flashSetIndexAsAttribute(elements) {
	for (var i = 0; i < elements.length; i++) { elements[i].setAttribute('index', ''+i+''); }
}

// the-end-of-flash-set-index



// flash-create-element

	function flashCreateElement(tagName, html = "", attributes = {}, parent = false, childIndex = "last-child") {

		var el = document.createElement(''+tagName+'');
		el.innerHTML = html;

		for (x in attributes) {	el.setAttribute(''+x+'',''+attributes[x]+''); }

	  	if (parent) {

	  		if (childIndex == "last-child") parent.appendChild(el);
	  		else if (childIndex == "first-child") parent.insertBefore(el, parent.childNodes[0]);
	 		else parent.insertBefore(el, parent.children[childIndex]);
	  	}

	  	return el;

	}

// the-end-of-flash-create-element



// flash-remove-class

function flashRemoveClass(element, className, exceptionalElement) {

	// using_functions
	if (element[0] == undefined) removeClassOfElement();
	else removeClassOfElements();

	// functions
	function removeClassOfElement() { element.classList.remove(''+className+''); }

	function removeClassOfElements() {

		for (var i = 0; i < element.length; i++) {

			element[i].classList.remove(''+className+'');

		}

		if (exceptionalElement != undefined) exceptionalElement.classList.add(''+className+'');
		
	}

}

function flashAddClassAndRemoveOthers(el, className, otherClassNames = []) {

	el = flashSelector(el);

	for (var i = 0; i < otherClassNames.length; i++) {
		
		if (otherClassNames[i] == className) continue;
		el.classList.remove(''+otherClassNames[i]+'');
	}

	el.classList.add(''+className+'');

}

function flashRemoveClasses(el, classNames = []) {

	el = flashSelector(el);

	for (var i = 0; i < classNames.length; i++) {
		
		el.classList.remove(''+classNames[i]+'');
	}

}

// the-end-of-flash-remove-class



// flash-add-event

function flashAddEventListenerToAllElements(elements, event = "click", functionName) {

	for (var i = 0; i < elements.length; i++) {
		
		elements[i].addEventListener(''+event+'', functionName);
	}

}

// the-end-of-flash-add-event




// flash-input-character-limit 

function flashInputCharacterLimit(el, limit) {

  limit -= 1;

  function check(e) {

    if(el.value.length > limit)
      if ( !(e.which == '46' || e.which == '8' || e.which == '13') ) // backspace/enter/del
          e.preventDefault();

  }

  el.addEventListener('keydown', check);
     
}

// the-end-of-flash-input-character-limit 




// flash-get-child-element-nodes

flashGetChildElementNodes = (par) => {

	var children = [];
	let x = 0;

	for (let i = 0; i < par.childNodes.length; i++) {
		if (par.childNodes[i].nodeType == 1) { children[x] = par.childNodes[i]; x++; }
	}

	return children;
	
}

// the-end-of-flash-get-child-element-nodes




// flash-counter

const flashCounter = (el, to, from = 0, add = 1, speed = 1) => {

	var myFunction;
	var num = from;
	el.innerHTML = from;

	if (to == "get-from-target") to = el.getAttribute('to');

	myFunction = setInterval(function() {

		num += add;
		el.innerHTML = num;

		if (num + add >= to) { clearInterval(myFunction); el.innerHTML = to; }	

	}, speed);

}

// the-end-of-flash-counter



// flash-is-in-view

const flashIsInView = (el, percentageScroll = 100) => {

  const elementTop = el.getBoundingClientRect().top;
  return (
    elementTop <= 
    ((window.innerHeight || document.documentElement.clientHeight) * (percentageScroll/100))
  );

};

// the-end-of-flash-is-in-view



// flash-get-page-full-height

function flashGetPageFullHeight() {

	const body = document.body, html = document.documentElement;
    return Math.max(body.scrollHeight, body.offsetHeight,html.clientHeight, html.scrollHeight, html.offsetHeight) + "px";

}

// the-end-of-flash-get-page-full-height



// flash-is-email

function flashIsEmail(val) {

	const reg = new RegExp('^([a-zA-Z0-9-._]+)'+
		               '(@)([a-zA-Z0-9-.]+)'+
		               '(.)([a-zA-Z]{2,4})$');
	
	return reg.test(val);

}

// the-end-of-flash-is-email



// flash-blinking-circles

var blinkingCirlces;

function flashBlinkingCircles() {

	const par = document.querySelector('.fl-loading-ani-blinking-circles');
	const order = par.getAttribute('order');
	const elements = par.querySelectorAll('.fl-loading-ani-blinking-circle');
	var x = 0;
	if (order != "true") return;

	// functions
	const show = (el) => el.classList.add('fl-show');

	const hide = (el) => { 

		for (let i = 0; i < elements.length; i++) {	
			if (elements[i] === el) continue; 
			elements[i].classList.remove('fl-show');
		}

	}

	// calling-functions
	blinkingCirlces = setInterval( 
		function() { show(elements[x]); hide(elements[x]); x == 2 ? x = 0 : x++; },
	1000);

}

function flashStopBlinkingCircles() { clearInterval(blinkingCirlces); }

// the-end-of-flash-blinking-circles




// flash-change-containers

function flashChangeContainers() {

	const changeContainers = (el) => {

		const buttons = el.querySelectorAll('.fl-change-containers-btn');
		const items = el.querySelectorAll('.fl-change-containers-item');

		// functions
		function show() {
			const index = this.getAttribute('data-index');
			for (let i = 0; i < items.length; i++) { i == index ? active(i) : deactive(i); }
		}

		const active = (i) => { items[i].classList.add('fl-show'); buttons[i].classList.add('fl-active'); }

		const deactive = (i) => { items[i].classList.remove('fl-show'); buttons[i].classList.remove('fl-active'); }

		// adding-functions
		for (let i = 0; i < buttons.length; i++) { 
			buttons[i].addEventListener('click', show);
			buttons[i].setAttribute('data-index', i); 
		}

	}

	// adding-function
	const elements = document.querySelectorAll('.fl-change-containers');
	for (let i = 0; i < elements.length; i++) { changeContainers(elements[i]); }

}

// the-end-of-flash-change-containers


// the-end-of-functions